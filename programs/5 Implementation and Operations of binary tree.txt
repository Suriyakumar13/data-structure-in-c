#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *left;
    struct node *right;
} node;

node *insert(node *tree, int digit) {
    if (tree == NULL) {
        tree = (node *)malloc(sizeof(node));
        tree->left = tree->right = NULL;
        tree->data = digit;
    } else if (digit <= tree->data) {
        tree->left = insert(tree->left, digit);
    } else {
        tree->right = insert(tree->right, digit);
    }
    return tree;
}

void preorder(node *t) {
    if (t != NULL) {
        printf(" %d", t->data);
        preorder(t->left);
        preorder(t->right);
    }
}

void postorder(node *t) {
    if (t != NULL) {
        postorder(t->left);
        postorder(t->right);
        printf(" %d", t->data);
    }
}

void inorder(node *t) {
    if (t != NULL) {
        inorder(t->left);
        printf(" %d", t->data);
        inorder(t->right);
    }
}

int main() {
    node *root = NULL;
    int digit;
    
    printf("Enter an integer (To quit, enter 0): ");
    scanf("%d", &digit);
    
    while (digit != 0) {
        root = insert(root, digit);
        scanf("%d", &digit);
    }
    
    printf("\nThe preorder traversal of the tree is:\n");
    preorder(root);
    
    printf("\nThe inorder traversal of the tree is:\n");
    inorder(root);
    
    printf("\nThe postorder traversal of the tree is:\n");
    postorder(root);
    
    return 0;
}
